Regression Tests
================

Deprecated `path` option works correctly
----------------------------------------

  >>> write('buildout.cfg',
  ... '''
  ... [buildout]
  ... parts = mydir
  ... offline = true
  ...
  ... [mydir]
  ... recipe = z3c.recipe.mkdir
  ... path = my/nested/dir
  ... ''')

Using 'path' (deprecated but we promised to still support it) creates
the given path and not the default (parts/mydir) (bug up to 0.3.1):

Now we can run buildout:

  >>> print system(join('bin', 'buildout')),
  mydir: Use of 'path' option is deprectated. Use 'paths' instead.
  Installing mydir.
  mydir: created path: /sample-buildout/my
  mydir: created path: /sample-buildout/my/nested
  mydir: created path: /sample-buildout/my/nested/dir

The directories were indeed created in the current directory:

  >>> ls('my')
  d  nested

  >>> ls('my/nested')
  d  dir

Empty path is not processed
---------------------------

Up to version 0.4 the empty path was considered to be the current
directory and permissions set. This does not happen anymore.

We create a `paths` definition with empty entries (first and middle):

  >>> write('buildout.cfg',
  ... '''
  ... [buildout]
  ... parts = mydir
  ... offline = true
  ...
  ... [mydir]
  ... recipe = z3c.recipe.mkdir
  ... paths =
  ...    mypath1
  ...
  ...    mypath2
  ... mode = 0750
  ... ''')

  >>> print system(join('bin', 'buildout')),
  Uninstalling mydir.
  Installing mydir.
  mydir: created path: /sample-buildout/mypath1
  mydir:   mode 0750
  mydir: created path: /sample-buildout/mypath2
  mydir:   mode 0750
